from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# Load model and tokenizer once
print("Loading model... (This may take some time)")
tokenizer = AutoTokenizer.from_pretrained("suriya7/Gemma2B-Finetuned-Sql-Generator")
model = AutoModelForCausalLM.from_pretrained(
    "suriya7/Gemma2B-Finetuned-Sql-Generator",
    torch_dtype=torch.float32,  # Use float32 for CPU compatibility
    low_cpu_mem_usage=True
)

# Optimize model for inference if torch.compile is available
if hasattr(torch, "compile"):
    model = torch.compile(model)

# Set model to evaluation mode to save memory
model.eval()
print("Model loaded successfully!")

def generate_sql_query(prompt: str, schema: str) -> str:
    """Generates SQL query from a given natural language prompt with schema."""
    prompt_template = f"""
    You are an AI specialized in generating SQL queries.
    Provide only the SQL query for the given prompt and schema.
    Do not include explanations or additional text.
    
    Schema:
    {schema}
    
    Prompt:
    {prompt}
    SQL:
    """
    
    inputs = tokenizer(prompt_template, return_tensors="pt", truncation=True, max_length=512, padding=True)
    inputs["attention_mask"] = inputs["input_ids"] != tokenizer.pad_token_id  # Explicit attention mask
    
    with torch.inference_mode():
        generated_ids = model.generate(
            inputs["input_ids"],
            attention_mask=inputs["attention_mask"],
            max_new_tokens=150,  # Increased to capture full SQL query
            do_sample=False,    # Ensures deterministic output
            num_beams=1,        # No beam search for efficiency
            pad_token_id=tokenizer.eos_token_id
        )
    
    generated_text = tokenizer.decode(generated_ids[0], skip_special_tokens=True)
    
    # Extract only the SQL query from the output
    sql_output = generated_text.split("SQL:")[-1].strip()
    sql_output = sql_output.split(";")[0].strip() + ";" if ";" in sql_output else sql_output  # Ensure query ends with a semicolon
    
    return sql_output

# Interactive loop for user queries
sample_schema = """
CREATE TABLE products (
    product_id INT,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT
);
"""

print("\nType your question and get the SQL query (type 'exit' to quit):")
while True:
    user_input = input("\nUser: ")
    if user_input.lower() == "exit":
        print("Exiting application...")
        break
    sql_query = generate_sql_query(user_input, sample_schema)
    print("\nGenerated SQL Query:")
    print(sql_query)
