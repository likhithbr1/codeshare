import torch
from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_huggingface import HuggingFacePipeline
from langchain.sql_database import SQLDatabase
from langchain.tools import QuerySQLDataBaseTool
from sqlalchemy import create_engine

# Set device
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Device set to use {device}")

# Load the Gemma model
model_name = "google/gemma-2b-it"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.float32).to(device)

# Define a text-generation pipeline
pipeline_model = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_new_tokens=256,
    device=device
)

# Use HuggingFacePipeline (Updated LangChain Version)
llm = HuggingFacePipeline(pipeline=pipeline_model)

# MySQL Database Connection
DATABASE_URL = "mysql+pymysql://user:password@host/database"
engine = create_engine(DATABASE_URL)
db = SQLDatabase(engine)

# Define Prompt (Updated to match expected input variables)
prompt = PromptTemplate(
    input_variables=['input', 'top_k', 'table_info'],
    template="""
    Given the following MySQL database schema:

    {table_info}

    Convert the following natural language query into an optimized SQL query:

    "{input}"

    Return only the SQL query without explanations.

    Limit results to the top {top_k} rows.
    """
)

# Create SQL Query Chain
def create_sql_query_chain(llm, db, prompt):
    return LLMChain(llm=llm, prompt=prompt)

sql_chain = create_sql_query_chain(llm, db, prompt)

# User Input for Testing
user_input = "Show me all employees who earn more than 50000 per year."
table_info = db.get_table_info("employees")

query = sql_chain.run({
    "input": user_input,
    "top_k": 10,
    "table_info": table_info
})

print("Generated SQL Query:")
print(query)

# Execute the SQL Query
try:
    result = db.run(query)
    print("Query Result:", result)
except Exception as e:
    print(f"SQL Query Error: {e}")
